### YamlMime:ManagedReference
items:
- uid: DataBaseAccess.DataAccessService
  commentId: T:DataBaseAccess.DataAccessService
  id: DataAccessService
  parent: DataBaseAccess
  children:
  - DataBaseAccess.DataAccessService.#ctor(System.String)
  - DataBaseAccess.DataAccessService.ConnectionString
  - DataBaseAccess.DataAccessService.Insert(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  - DataBaseAccess.DataAccessService.Insert(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})
  - DataBaseAccess.DataAccessService.Query(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  - DataBaseAccess.DataAccessService.Query(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})
  - DataBaseAccess.DataAccessService.Scalar``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  - DataBaseAccess.DataAccessService.Scalar``1(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})
  - DataBaseAccess.DataAccessService.Update(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  - DataBaseAccess.DataAccessService.Update(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})
  langs:
  - csharp
  - vb
  name: DataAccessService
  nameWithType: DataAccessService
  fullName: DataBaseAccess.DataAccessService
  type: Class
  source:
    id: DataAccessService
    path: D:\Users\Ferran Tudela\source\repos\HADSProject\DataBaseAccess\Framework\DataAccessService.cs
    startLine: 12
  assemblies:
  - DataBaseAccess
  namespace: DataBaseAccess
  syntax:
    content: 'public class DataAccessService : IDataAccessService'
    content.vb: >-
      Public Class DataAccessService
          Implements IDataAccessService
  inheritance:
  - System.Object
  implements:
  - DataBaseAccess.IDataAccessService
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: DataBaseAccess.DataAccessService.ConnectionString
  commentId: P:DataBaseAccess.DataAccessService.ConnectionString
  id: ConnectionString
  parent: DataBaseAccess.DataAccessService
  langs:
  - csharp
  - vb
  name: ConnectionString
  nameWithType: DataAccessService.ConnectionString
  fullName: DataBaseAccess.DataAccessService.ConnectionString
  type: Property
  source:
    id: ConnectionString
    path: D:\Users\Ferran Tudela\source\repos\HADSProject\DataBaseAccess\Framework\DataAccessService.cs
    startLine: 14
  assemblies:
  - DataBaseAccess
  namespace: DataBaseAccess
  syntax:
    content: public string ConnectionString { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property ConnectionString As String
  overload: DataBaseAccess.DataAccessService.ConnectionString*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DataBaseAccess.DataAccessService.#ctor(System.String)
  commentId: M:DataBaseAccess.DataAccessService.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: DataBaseAccess.DataAccessService
  langs:
  - csharp
  - vb
  name: DataAccessService(String)
  nameWithType: DataAccessService.DataAccessService(String)
  fullName: DataBaseAccess.DataAccessService.DataAccessService(System.String)
  type: Constructor
  source:
    id: .ctor
    path: D:\Users\Ferran Tudela\source\repos\HADSProject\DataBaseAccess\Framework\DataAccessService.cs
    startLine: 16
  assemblies:
  - DataBaseAccess
  namespace: DataBaseAccess
  syntax:
    content: public DataAccessService(string connectionString)
    parameters:
    - id: connectionString
      type: System.String
    content.vb: Public Sub New(connectionString As String)
  overload: DataBaseAccess.DataAccessService.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DataBaseAccess.DataAccessService.Insert(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:DataBaseAccess.DataAccessService.Insert(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: Insert(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: DataBaseAccess.DataAccessService
  langs:
  - csharp
  - vb
  name: Insert(String, Dictionary<String, Object>)
  nameWithType: DataAccessService.Insert(String, Dictionary<String, Object>)
  fullName: DataBaseAccess.DataAccessService.Insert(System.String, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    id: Insert
    path: D:\Users\Ferran Tudela\source\repos\HADSProject\DataBaseAccess\Framework\DataAccessService.cs
    startLine: 20
  assemblies:
  - DataBaseAccess
  namespace: DataBaseAccess
  syntax:
    content: public int Insert(string query, Dictionary<string, object> parameters = null)
    parameters:
    - id: query
      type: System.String
    - id: parameters
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    return:
      type: System.Int32
    content.vb: Public Function Insert(query As String, parameters As Dictionary(Of String, Object) = Nothing) As Integer
  overload: DataBaseAccess.DataAccessService.Insert*
  nameWithType.vb: DataAccessService.Insert(String, Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DataBaseAccess.DataAccessService.Insert(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: Insert(String, Dictionary(Of String, Object))
- uid: DataBaseAccess.DataAccessService.Insert(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:DataBaseAccess.DataAccessService.Insert(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: Insert(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: DataBaseAccess.DataAccessService
  langs:
  - csharp
  - vb
  name: Insert(String, CommandType, Dictionary<String, Object>)
  nameWithType: DataAccessService.Insert(String, CommandType, Dictionary<String, Object>)
  fullName: DataBaseAccess.DataAccessService.Insert(System.String, System.Data.CommandType, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    id: Insert
    path: D:\Users\Ferran Tudela\source\repos\HADSProject\DataBaseAccess\Framework\DataAccessService.cs
    startLine: 24
  assemblies:
  - DataBaseAccess
  namespace: DataBaseAccess
  syntax:
    content: public int Insert(string query, CommandType commandType = CommandType.Text, Dictionary<string, object> parameters = null)
    parameters:
    - id: query
      type: System.String
    - id: commandType
      type: System.Data.CommandType
    - id: parameters
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    return:
      type: System.Int32
    content.vb: Public Function Insert(query As String, commandType As CommandType = CommandType.Text, parameters As Dictionary(Of String, Object) = Nothing) As Integer
  overload: DataBaseAccess.DataAccessService.Insert*
  nameWithType.vb: DataAccessService.Insert(String, CommandType, Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DataBaseAccess.DataAccessService.Insert(System.String, System.Data.CommandType, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: Insert(String, CommandType, Dictionary(Of String, Object))
- uid: DataBaseAccess.DataAccessService.Query(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:DataBaseAccess.DataAccessService.Query(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: Query(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: DataBaseAccess.DataAccessService
  langs:
  - csharp
  - vb
  name: Query(String, Dictionary<String, Object>)
  nameWithType: DataAccessService.Query(String, Dictionary<String, Object>)
  fullName: DataBaseAccess.DataAccessService.Query(System.String, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    id: Query
    path: D:\Users\Ferran Tudela\source\repos\HADSProject\DataBaseAccess\Framework\DataAccessService.cs
    startLine: 43
  assemblies:
  - DataBaseAccess
  namespace: DataBaseAccess
  syntax:
    content: public List<IDataRecord> Query(string query, Dictionary<string, object> parameters = null)
    parameters:
    - id: query
      type: System.String
    - id: parameters
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    return:
      type: System.Collections.Generic.List{System.Data.IDataRecord}
    content.vb: Public Function Query(query As String, parameters As Dictionary(Of String, Object) = Nothing) As List(Of IDataRecord)
  overload: DataBaseAccess.DataAccessService.Query*
  nameWithType.vb: DataAccessService.Query(String, Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DataBaseAccess.DataAccessService.Query(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: Query(String, Dictionary(Of String, Object))
- uid: DataBaseAccess.DataAccessService.Query(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:DataBaseAccess.DataAccessService.Query(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: Query(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: DataBaseAccess.DataAccessService
  langs:
  - csharp
  - vb
  name: Query(String, CommandType, Dictionary<String, Object>)
  nameWithType: DataAccessService.Query(String, CommandType, Dictionary<String, Object>)
  fullName: DataBaseAccess.DataAccessService.Query(System.String, System.Data.CommandType, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    id: Query
    path: D:\Users\Ferran Tudela\source\repos\HADSProject\DataBaseAccess\Framework\DataAccessService.cs
    startLine: 47
  assemblies:
  - DataBaseAccess
  namespace: DataBaseAccess
  syntax:
    content: public List<IDataRecord> Query(string query, CommandType commandType = CommandType.Text, Dictionary<string, object> parameters = null)
    parameters:
    - id: query
      type: System.String
    - id: commandType
      type: System.Data.CommandType
    - id: parameters
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    return:
      type: System.Collections.Generic.List{System.Data.IDataRecord}
    content.vb: Public Function Query(query As String, commandType As CommandType = CommandType.Text, parameters As Dictionary(Of String, Object) = Nothing) As List(Of IDataRecord)
  overload: DataBaseAccess.DataAccessService.Query*
  nameWithType.vb: DataAccessService.Query(String, CommandType, Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DataBaseAccess.DataAccessService.Query(System.String, System.Data.CommandType, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: Query(String, CommandType, Dictionary(Of String, Object))
- uid: DataBaseAccess.DataAccessService.Update(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:DataBaseAccess.DataAccessService.Update(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: Update(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: DataBaseAccess.DataAccessService
  langs:
  - csharp
  - vb
  name: Update(String, Dictionary<String, Object>)
  nameWithType: DataAccessService.Update(String, Dictionary<String, Object>)
  fullName: DataBaseAccess.DataAccessService.Update(System.String, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    id: Update
    path: D:\Users\Ferran Tudela\source\repos\HADSProject\DataBaseAccess\Framework\DataAccessService.cs
    startLine: 67
  assemblies:
  - DataBaseAccess
  namespace: DataBaseAccess
  syntax:
    content: public int Update(string query, Dictionary<string, object> parameters = null)
    parameters:
    - id: query
      type: System.String
    - id: parameters
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    return:
      type: System.Int32
    content.vb: Public Function Update(query As String, parameters As Dictionary(Of String, Object) = Nothing) As Integer
  overload: DataBaseAccess.DataAccessService.Update*
  nameWithType.vb: DataAccessService.Update(String, Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DataBaseAccess.DataAccessService.Update(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: Update(String, Dictionary(Of String, Object))
- uid: DataBaseAccess.DataAccessService.Update(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:DataBaseAccess.DataAccessService.Update(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: Update(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: DataBaseAccess.DataAccessService
  langs:
  - csharp
  - vb
  name: Update(String, CommandType, Dictionary<String, Object>)
  nameWithType: DataAccessService.Update(String, CommandType, Dictionary<String, Object>)
  fullName: DataBaseAccess.DataAccessService.Update(System.String, System.Data.CommandType, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    id: Update
    path: D:\Users\Ferran Tudela\source\repos\HADSProject\DataBaseAccess\Framework\DataAccessService.cs
    startLine: 71
  assemblies:
  - DataBaseAccess
  namespace: DataBaseAccess
  syntax:
    content: public int Update(string query, CommandType commandType = CommandType.Text, Dictionary<string, object> parameters = null)
    parameters:
    - id: query
      type: System.String
    - id: commandType
      type: System.Data.CommandType
    - id: parameters
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    return:
      type: System.Int32
    content.vb: Public Function Update(query As String, commandType As CommandType = CommandType.Text, parameters As Dictionary(Of String, Object) = Nothing) As Integer
  overload: DataBaseAccess.DataAccessService.Update*
  nameWithType.vb: DataAccessService.Update(String, CommandType, Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DataBaseAccess.DataAccessService.Update(System.String, System.Data.CommandType, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: Update(String, CommandType, Dictionary(Of String, Object))
- uid: DataBaseAccess.DataAccessService.Scalar``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:DataBaseAccess.DataAccessService.Scalar``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: Scalar``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: DataBaseAccess.DataAccessService
  langs:
  - csharp
  - vb
  name: Scalar<T>(String, Dictionary<String, Object>)
  nameWithType: DataAccessService.Scalar<T>(String, Dictionary<String, Object>)
  fullName: DataBaseAccess.DataAccessService.Scalar<T>(System.String, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    id: Scalar
    path: D:\Users\Ferran Tudela\source\repos\HADSProject\DataBaseAccess\Framework\DataAccessService.cs
    startLine: 90
  assemblies:
  - DataBaseAccess
  namespace: DataBaseAccess
  syntax:
    content: public T Scalar<T>(string query, Dictionary<string, object> parameters = null)
    parameters:
    - id: query
      type: System.String
    - id: parameters
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function Scalar(Of T)(query As String, parameters As Dictionary(Of String, Object) = Nothing) As T
  overload: DataBaseAccess.DataAccessService.Scalar*
  nameWithType.vb: DataAccessService.Scalar(Of T)(String, Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DataBaseAccess.DataAccessService.Scalar(Of T)(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: Scalar(Of T)(String, Dictionary(Of String, Object))
- uid: DataBaseAccess.DataAccessService.Scalar``1(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:DataBaseAccess.DataAccessService.Scalar``1(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: Scalar``1(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: DataBaseAccess.DataAccessService
  langs:
  - csharp
  - vb
  name: Scalar<T>(String, CommandType, Dictionary<String, Object>)
  nameWithType: DataAccessService.Scalar<T>(String, CommandType, Dictionary<String, Object>)
  fullName: DataBaseAccess.DataAccessService.Scalar<T>(System.String, System.Data.CommandType, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    id: Scalar
    path: D:\Users\Ferran Tudela\source\repos\HADSProject\DataBaseAccess\Framework\DataAccessService.cs
    startLine: 94
  assemblies:
  - DataBaseAccess
  namespace: DataBaseAccess
  syntax:
    content: public T Scalar<T>(string query, CommandType commandType = CommandType.Text, Dictionary<string, object> parameters = null)
    parameters:
    - id: query
      type: System.String
    - id: commandType
      type: System.Data.CommandType
    - id: parameters
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function Scalar(Of T)(query As String, commandType As CommandType = CommandType.Text, parameters As Dictionary(Of String, Object) = Nothing) As T
  overload: DataBaseAccess.DataAccessService.Scalar*
  nameWithType.vb: DataAccessService.Scalar(Of T)(String, CommandType, Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DataBaseAccess.DataAccessService.Scalar(Of T)(System.String, System.Data.CommandType, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: Scalar(Of T)(String, CommandType, Dictionary(Of String, Object))
references:
- uid: DataBaseAccess
  commentId: N:DataBaseAccess
  name: DataBaseAccess
  nameWithType: DataBaseAccess
  fullName: DataBaseAccess
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: DataBaseAccess.IDataAccessService
  commentId: T:DataBaseAccess.IDataAccessService
  parent: DataBaseAccess
  name: IDataAccessService
  nameWithType: IDataAccessService
  fullName: DataBaseAccess.IDataAccessService
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DataBaseAccess.DataAccessService.ConnectionString*
  commentId: Overload:DataBaseAccess.DataAccessService.ConnectionString
  name: ConnectionString
  nameWithType: DataAccessService.ConnectionString
  fullName: DataBaseAccess.DataAccessService.ConnectionString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: DataBaseAccess.DataAccessService.#ctor*
  commentId: Overload:DataBaseAccess.DataAccessService.#ctor
  name: DataAccessService
  nameWithType: DataAccessService.DataAccessService
  fullName: DataBaseAccess.DataAccessService.DataAccessService
- uid: DataBaseAccess.DataAccessService.Insert*
  commentId: Overload:DataBaseAccess.DataAccessService.Insert
  name: Insert
  nameWithType: DataAccessService.Insert
  fullName: DataBaseAccess.DataAccessService.Insert
- uid: System.Collections.Generic.Dictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Object>
  nameWithType: Dictionary<String, Object>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Object>
  nameWithType.vb: Dictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Object)
  name.vb: Dictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Data.CommandType
  commentId: T:System.Data.CommandType
  parent: System.Data
  isExternal: true
  name: CommandType
  nameWithType: CommandType
  fullName: System.Data.CommandType
- uid: System.Data
  commentId: N:System.Data
  isExternal: true
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
- uid: DataBaseAccess.DataAccessService.Query*
  commentId: Overload:DataBaseAccess.DataAccessService.Query
  name: Query
  nameWithType: DataAccessService.Query
  fullName: DataBaseAccess.DataAccessService.Query
- uid: System.Collections.Generic.List{System.Data.IDataRecord}
  commentId: T:System.Collections.Generic.List{System.Data.IDataRecord}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<IDataRecord>
  nameWithType: List<IDataRecord>
  fullName: System.Collections.Generic.List<System.Data.IDataRecord>
  nameWithType.vb: List(Of IDataRecord)
  fullName.vb: System.Collections.Generic.List(Of System.Data.IDataRecord)
  name.vb: List(Of IDataRecord)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.IDataRecord
    name: IDataRecord
    nameWithType: IDataRecord
    fullName: System.Data.IDataRecord
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.IDataRecord
    name: IDataRecord
    nameWithType: IDataRecord
    fullName: System.Data.IDataRecord
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: DataBaseAccess.DataAccessService.Update*
  commentId: Overload:DataBaseAccess.DataAccessService.Update
  name: Update
  nameWithType: DataAccessService.Update
  fullName: DataBaseAccess.DataAccessService.Update
- uid: DataBaseAccess.DataAccessService.Scalar*
  commentId: Overload:DataBaseAccess.DataAccessService.Scalar
  name: Scalar
  nameWithType: DataAccessService.Scalar
  fullName: DataBaseAccess.DataAccessService.Scalar
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
